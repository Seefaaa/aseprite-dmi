--- Lib is a class that serves as a library for the DMI Editor script.
--- It provides various utility functions.
--- @class Lib
--- @field path string The path to the library.
--- @field temp_dir string The temporary directory.
Lib = {}
Lib.__index = Lib

--- Creates a new instance of the Lib class.
--- @param lib_path string The path to the library.
--- @param temp_dir string The temporary directory.
--- @return Lib lib The new Lib instance.
function Lib.new(lib_path, temp_dir)
	local self = setmetatable({}, Lib)
	self.path = lib_path
	self.temp_dir = temp_dir
	return self
end

--- Executes a command with arguments and returns the result.
--- @param command string The command to execute.
--- @param args string The arguments for the command.
--- @return boolean|nil success True if the command executed successfully, false otherwise.
--- @return string reason The reason for the success or failure of the command.
--- @return number code The exit code of the command.
--- @return string output The output generated by the command.
function Lib:call(command, args)
	local handle = io.popen(self.path .. " " .. command .. " " .. args, "r")

	assert(type(handle) == "userdata", "Lib:call: handle must be a userdata")

	---@diagnostic disable-next-line: undefined-field
	local output = handle:read("*a")
	---@diagnostic disable-next-line: undefined-field
	local success, reason, code = handle:close()

	assert(type(success) == "boolean" or type(success) == "nil", "Lib:call: success must be a boolean or nil")
	assert(type(reason) == "string", "Lib:call: reason must be a string")
	assert(type(code) == "number", "Lib:call: code must be a number")
	assert(type(output) == "string", "Lib:call: output must be a string")

	-- print(success, reason, code, output)

	if not success then
		self:print_error(code, reason, output)
	end

	return success, reason, code, output
end

--- Prints an error message with the provided code, reason, and output.
--- @param code number The error code.
--- @param reason string The reason for the error.
--- @param output string The output related to the error.
function Lib:print_error(code, reason, output)
	print("Error code: " .. code .. "\nReason: " .. reason .. "\nOutput: " .. output)
end

--- Opens a DMI file and returns the parsed data.
--- @param path string The path to the DMI file.
--- @return boolean|nil success Whether the file was opened successfully.
--- @return string reason The reason for any failure in opening the file.
--- @return number code The code returned by the file opening process.
--- @return string output The output of the file opening process.
--- @return Dmi|nil dmi The parsed DMI data, or nil if the file failed to open.
function Lib:open(path)
	local success, reason, code, output = self:call("OPEN", '"' .. path .. '" "' .. self.temp_dir .. '"')
	return success, reason, code, output, success and Dmi.new(json.decode(output)) or nil
end

--- Saves the DMI data to a json file and calls lib with the path of the json.
--- @param dmi Dmi The DMI data to be saved.
--- @param path string The path where the DMI data will be saved.
function Lib:save(dmi, path)
	local data_json = app.fs.joinPath(dmi.temp, "data.json")
	local file, errmsg = io.open(data_json, "w+")

	if file then
		file:write(json.encode(dmi))
		file:close()

		return self:call("SAVE", '"' .. path .. '" "' .. data_json .. '"')
	else
		print("Error writing to file: " .. errmsg)
	end
end

--- Creates a new file with the specified name, width, and height.
--- @param name string The name of the file.
--- @param width number The width of the file.
--- @param height number The height of the file.
--- @return boolean|nil success Whether the file creation was successful.
--- @return string reason The reason for any failure in creating the file.
--- @return number code The code returned by the file creation process.
--- @return string output The output of the file creation process.
--- @return Dmi|nil dmi The newly created Dmi object, or nil if creation failed.
function Lib:new_file(name, width, height)
	local success, reason, code, output = self:call("NEW",
		'"' .. self.temp_dir .. '" "' .. name .. '" ' .. width .. ' ' .. height)
	return success, reason, code, output, success and Dmi.new(json.decode(output)) or nil
end

--- Creates a new state using the provided DMI information.
--- @param dmi Dmi The DMI object containing the necessary information.
--- @return boolean|nil success True if the state creation was successful, false otherwise.
--- @return string reason The reason for the success or failure.
--- @return number code The code associated with the state creation.
--- @return string output The output generated during the state creation.
--- @return State|nil state The newly created State object, or nil if the creation failed.
function Lib:new_state(dmi)
	local success, reason, code, output = self:call("NEWSTATE",
		'"' .. dmi.temp .. '"' .. ' ' .. math.floor(dmi.width) .. ' ' .. math.floor(dmi.height))
	return success, reason, code, output, success and State.new(json.decode(output)) or nil
end

--- Removes a directory at the specified path.
--- @param path string The path of the directory to be removed.
--- @return boolean|nil success True if the directory is successfully removed, false otherwise.
--- @return string reason The reason for the failure, if any.
--- @return number code The error code, if any.
--- @return string output The output message, if any.
function Lib:remove_dir(path)
	return self:call("RM", '"' .. path .. '"')
end
